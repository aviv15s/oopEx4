aviv.shemesh,ram3108_
213847015, 213809957

1) How we implemented the Trees package:
- We divided the flora components to their basic building blocks. We created a class for the Fruit, Leaves and
  Trunks. Those classes are then used in the Tree class which builds a complete tree out of these components.
  The Flora class therefor has to only create trees randomly.
  We chose to implement most of these classes as sub-classes of the GameObject, because the fruits and leaves
  and trunks have unique behaviours that occur whenever the player jumps.
  This makes the package built like a pyramid, where each class knows about itself and the classes it has to
  manage. Therefor the Leaf, Trunk and Fruit are independent and the Tree and Flora class manipulate those
  objects to create more complex structures of trees and forests. This helps keep the code encapsulated by
  behaviour.

2) The classes we created in that package:
- Fruit: Class that extends GameObject and implements the Observer.
This class represents the Fruit that on tree.
- Leaf: Class that extends GameObject and implements the Observer.
This class represents the Leaf that on tree.
- Trunk: Class that extends GameObject and implements the Observer.
This class represents the trunk of one tree.
- Tree: Class that contains a list of Leaf a list of Fruits and a Trunk.
This class represents one tree.
- Flora: Class that contains list of trees.
This class represents the entire forest.


3) The connection between the classes in that package:
-Flora contains list of trees so that each tree stands for himself. It also make sense that each tree
 will contain a root, leafs and fruits. so for that design tree contains root and two
 lists one for leafs and one for fruits.
- The Terrain class and The Tree (and Flora) classes are a bit more complex. They use basic building blocks
  (literally the Block class for the Terrain and Trunk, Leaf and Fruit class for Trees) to create complex
  structures in the world. These classes therefor need to know how to create such objects and how they should
  be placed in the world.
- it is important to note that the flora gets consumer of adding observer to the avatar that
she fill pass along and tree will use it.
-Tree while initializing himself decided where to put leafs and fruits (with rand func)
and set all of his Objects to observer of the avatar
- Some classes need to be updated by events in the game. In this exercise the only relevant event is the
  player jumping, and for that we used the observer design pattern (more on that later).
- There are multiple classes which are "factory classes" (Sun, Halo, Night and a few more). These classes
  are standalone classes and do not even have a public constructor (we created a private one). These classes
  only hava a public static "create" function which returns a GameObject instance with some functionality.
  These classes are not really connected to any other class.

4) Design patterns used:
- We used the Observer design pattern to implement the different behaviours that occur whenever the player
  jumps. The player is the subject and calls each of it's observers when it jumps.
  The observers (leaves, fruits and trunks) get those updates and know to act accordingly. These classes
  do not know what the player is, and only receive a callback to it's subscription function upon creation,
  this helps maintain encapsulations.
  This means that there is a large help with using lambda functions (also seen in the transitions).